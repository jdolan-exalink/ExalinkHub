# ============================
#  APP (parámetros globales)
# ============================
[app]
mode=multi                       # single | multi
timezone=America/Argentina/Cordoba
retention_days=30                # 0 = sin purga histórica
storage=sqlite:////app/DB/Conteo.db
log_level=INFO                   # DEBUG|INFO|WARNING|ERROR
publish_every_seconds=5          # frecuencia mínima para publicar totales (antirruido)
count_on=end                     # new|update|end  --> recomendado: end
dedup_by=event_id                # event_id|track_id
min_event_duration_ms=400        # ignora eventos muy breves (falsos positivos)
cooldown_ms=800                  # evita doble conteo del mismo objeto muy junto en el tiempo

# ============================
#  OBJETOS (filtros globales)
# ============================
[objects]
labels=car,motorcycle,bus,bicycle,person
min_confidence=0.55              # umbral global
min_area_px=3500                 # ignora detecciones chicas
# Overrides por etiqueta (opcional)
min_confidence.auto=0.50
min_confidence.personas=0.60

# Si tu modelo/Frigate publica en inglés y vos querés contar en español, mapeá aquí:
# Sintaxis: origen:destino,separa_por_coma
labels_map=person:personas,car:auto,bus:autobús,bicycle:bicicleta,motorcycle:moto

# ============================
#  SERVIDORES (N MQTT por sitio)
#   Repetí [server:<id>] por cada broker/Frigate
# ============================
[server:helvecia]
mqtt_broker=10.147.18.148
mqtt_port=1883
mqtt_user=
mqtt_pass=
mqtt_tls=false                   # true para TLS
mqtt_ca_file=                    # ruta a CA si mqtt_tls=true
mqtt_client_id=contador-helvecia
mqtt_keepalive=30
mqtt_qos=0
topic_events=frigate/events
enabled=true

# Podés tener más brokers:
[server:autopista]
mqtt_broker=172.20.10.90
mqtt_port=1883
topic_events=frigate/events
enabled=false

# ============================
#  CÁMARAS (definición base)
#   Repetí [camera:<alias>] por cámara
#   <alias> es el nombre interno de esta app; frigate_camera DEBE igualar el "camera" del evento MQTT
# ============================
[camera:Escuela]
server=helvecia
frigate_camera=Escuela              # nombre EXACTO en Frigate
mode=zones                       # zones | role
zone_in=IN                       # nombres EXACTOS de zonas en Frigate
zone_out=OUT
labels=car,motorcycle,bus,bicycle,person        # override por cámara (opcional)

[camera:Cementerio]
server=helvecia
frigate_camera=Cementerio
mode=zones
zone_in=IN
zone_out=OUT

[camera:cam3_peaje_in]
server=autopista
frigate_camera=cam3
mode=role                        # para esquema de 2 cámaras
role=in

[camera:cam4_peaje_out]
server=autopista
frigate_camera=cam4
mode=role
role=out

# ============================
#  CONTADORES (la unidad lógica que suma/resta)
#   Repetí [counter:<id>] por cada flujo de conteo que quieras mantener
# ============================
# MODO A: 1 cámara con zonas IN/OUT
[counter:escuela]
type=zones                       # zones | two_cameras
source_camera=Escuela            # referencia a [camera:<alias>]
objects=auto,moto,personas       # si se omite, usa los globales
zone_strategy=entered            # entered | present | both
min_frames_in_zone=1             # robustez: exige N frames dentro de zona
initial_occupancy=0
reset_schedule=00:00             # HH:MM (resetea IN/OUT/OCUPACION diario) - opcional
publish_delta_only=true          # publica sólo cuando cambian los totales

[counter:cementerio]
type=zones
source_camera=Cementerio
objects=auto,moto,personas
zone_strategy=entered
min_frames_in_zone=1
initial_occupancy=0
reset_schedule=00:00
publish_delta_only=true

# ============================
#  PUBLICACIÓN DE RESULTADOS
# ============================
[publish:mqtt]
enabled=true
# ¿a qué broker publicamos resultados? (elegí uno; si omitís "server", publica en todos los [server:*])
server=helvecia
topic_prefix=exacount            # exacount/<counter_id>/...
qos=0
retain=false
# payloads:
# exacount/<counter_id>/totals -> {"in":123,"out":120,"occupancy":3,"ts":"2025-10-20T21:10:00-03:00"}
# exacount/<counter_id>/delta  -> {"in":+1} o {"out":+1} (si publish_delta_only=true)

[publish:prometheus]
enabled=true
listen=0.0.0.0:9105             # exporta métricas /metrics

[publish:webhook]
enabled=false
url=
auth_header=

# ============================
#  CONTROL FINO / ANTIRUIDO
# ============================
[anti_noise]
max_recount_ms=1500              # si el mismo track_id vuelve a "entrar" en < X ms, ignóralo
max_gap_ms_between_in_out=12000  # sólo para type=two_cameras (evita emparejar viajes distintos)
count_only_if_label_in=          # lista opcional; si se define, sólo cuenta si la etiqueta está en esta lista
ignore_if_in_zones=              # p.ej: "patio,techos"  (zonas de descarte)
