# =============================
# ExalinkHub - docker-compose.yml (PRODUCCIÓN)
# ---------------------------------------------
# Uso: docker compose up -d
#
# - Todos los servicios se comunican por red interna Docker (no expone puertos innecesarios)
# - Volúmenes usan rutas relativas multiplataforma (${PWD})
# - Funciona en Windows y Linux, en cualquier carpeta
# - Frontend accesible en el puerto 9002 (http://localhost:9002)
# - Para desarrollo, usar docker-compose.dev.yml
# =============================
services:
  matriculas-listener:
    build:
      context: ./backend/Matriculas
      dockerfile: listener/Dockerfile
    image: exalink/matriculas-listener:latest
    container_name: matriculas-listener
    restart: unless-stopped
    ports:
      - "${LPR_PORT:-2221}:2221"
    environment:
      - DB_DIR=/app/DB
      - MEDIA_DIR=/app/MEDIA
      - LOG_DIR=/app/LOG
      - CONF_PATH=/app/matriculas.conf
    # Volúmenes de datos y configuración
    volumes:
      - ./DB:/app/DB
      - ./MEDIA:/app/MEDIA
      - ./LOG:/app/LOG
      - ./backend/Matriculas/matriculas.conf:/app/matriculas.conf:ro
    networks:
      - lpr-network
    labels:
      - "com.exalink.service=matriculas-listener"

  lpr-redis:
    image: redis:7-alpine
    container_name: exalink-lpr-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-exalink123}
    volumes:
      - lpr-redis-data:/data
    networks:
      - lpr-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.exalink.service=lpr-redis"

  lpr-proxy:
    image: nginx:alpine
    container_name: exalink-lpr-proxy
    restart: unless-stopped
    ports:
      - "${LPR_HTTPS_PORT:-2443}:443"
      - "${LPR_HTTP_PORT:-2280}:80"
    # Configuración Nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - lpr-network
      - public
    depends_on:
      - matriculas-listener
    profiles:
      - proxy
    labels:
      - "com.exalink.service=lpr-proxy"

  lpr-monitor:
    image: prom/node-exporter:latest
    container_name: exalink-lpr-monitor
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
    # Node exporter
    volumes:
      - /:/host:ro,rslave
    networks:
      - lpr-network
    profiles:
      - monitoring
    labels:
      - "com.exalink.service=lpr-monitor"

  conteo-backend:
    build:
      context: ./backend/conteo/services/api
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: exalink/conteo-backend:latest
    container_name: exalink-conteo-backend
    restart: unless-stopped
    environment:
      - TZ=UTC
      - CONF_PATH=/app/config/conteo.conf
      - PROJECT_ROOT=/opt/ExalinkHub
    ports:
      - "${CONTEO_PORT:-2223}:8000"
    # Volúmenes de conteo
    volumes:
      - ./backend/conteo/config:/app/config:rw
      - ./backend/conteo/LOG:/app/LOG:rw
      - ./DB:/app/DB:rw
    networks:
      - lpr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    labels:
      - "com.exalink.service=conteo-backend"

  notificaciones-backend:
    build:
      context: ./backend/notificaciones
      dockerfile: Dockerfile
    image: exalink/notificaciones-backend:latest
    container_name: exalink-notificaciones-backend
    restart: unless-stopped
    environment:
      - TZ=UTC
    ports:
      - "${NOTIFICACIONES_PORT:-2224}:8022"
    # Volúmenes de notificaciones
    volumes:
      - ./backend/notificaciones/config:/app/config:rw
      - ./DB:/app/DB:rw
    networks:
      - lpr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8022/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    labels:
      - "com.exalink.service=notificaciones-backend"

  frontend:
    build:
      context: ./frontend-build
      dockerfile: Dockerfile
    image: exalink/frontend:latest
    container_name: exalink-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-9002}:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      # Comunicación interna Docker para conteo vehicular (compatible Windows/Linux/Mac)
      - NEXT_PUBLIC_CONTEO_BASE_URL=http://conteo-backend:8000
    # Volúmenes del frontend
    volumes:
      - ./DB:/app/DB:rw
      - ./data:/app/data:rw
      - ./MEDIA:/app/MEDIA:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - lpr-network
    depends_on:
      - matriculas-listener
      - conteo-backend
      - notificaciones-backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.exalink.service=frontend"

volumes:
  lpr-data:
    driver: local
    labels:
      - "com.exalink.volume=lpr-data"
  lpr-logs:
    driver: local
    labels:
      - "com.exalink.volume=lpr-logs"
  lpr-redis-data:
    driver: local
    labels:
      - "com.exalink.volume=lpr-redis-data"
  config-db:
    driver: local
    labels:
      - "com.exalink.volume=config-db"
  counting-db:
    driver: local
    labels:
      - "com.exalink.volume=counting-db"
  # se usan carpetas bind para DB/MEDIA/LOG de Matriculas (no named volumes)

networks:
  lpr-network:
    driver: bridge
    name: exalink-lpr-network
    labels:
      - "com.exalink.network=lpr-internal"
  public:
    driver: bridge
    name: exalink-public
    labels:
      com.exalink.network: public

