/**
 * Utilidades para autenticaci√≥n JWT con Frigate usando cookies
 * Basado en el ejemplo de Python exitoso
 */

import { secureFetch } from './secure-fetch';

interface JWTLoginResponse {
  access_token: string;
  token_type: string;
  expires_in?: number;
}

interface AuthResult {
  success: boolean;
  token?: string;
  expiresAt?: string;
  error?: string;
}

interface ValidationResult {
  success: boolean;
  message: string;
  requiresAuth: boolean;
  token?: string;
  expiresAt?: string;
  error?: string;
  metrics?: any;
}

/**
 * Realizar login JWT con Frigate usando autenticaci√≥n por cookies
 * Basado en el ejemplo de Python exitoso
 */
export async function loginToFrigate(
  baseUrl: string, 
  username: string, 
  password: string
): Promise<AuthResult> {
  try {
    const loginUrl = `${baseUrl}/api/login`;
    
    // Preparar datos de login como JSON (user, password) seg√∫n el ejemplo Python
    const payload = {
      user: username,      // ‚Üê Cambio: "user" en lugar de "username"
      password: password
    };
    
    // console.log(`üîê Intentando login JWT en: ${loginUrl}`);
    // console.log(`üìù Datos: user=${username}, Content-Type=application/json`);
    
    // Configurar opciones de fetch que ignoren SSL completamente
    const fetchOptions: RequestInit = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',  // ‚Üê Cambio: JSON en lugar de form-urlencoded
        'User-Agent': 'Exalink-Hub/1.0'
      },
      body: JSON.stringify(payload),         // ‚Üê Cambio: JSON payload
      credentials: 'include'                 // ‚Üê Importante: incluir cookies
    };

    // En entorno Node.js (servidor), ignorar errores SSL
    if (typeof process !== 'undefined' && process.env) {
      try {
        const https = require('https');
        (fetchOptions as any).agent = new https.Agent({
          rejectUnauthorized: false,
          checkServerIdentity: () => undefined
        });
      } catch (e) {
        console.warn('No se pudo configurar agente HTTPS:', e);
      }
    }
    
    const response = await fetch(loginUrl, fetchOptions);

    // console.log(`üì° Respuesta login: ${response.status} ${response.statusText}`);
    // console.log(`üç™ Set-Cookie: ${response.headers.get('Set-Cookie') || 'No cookies'}`);
    
    // Verificar si hay cookies de autenticaci√≥n (como en el ejemplo Python)
    const setCookieHeader = response.headers.get('Set-Cookie');
    const hasAuthCookie = setCookieHeader && (
      setCookieHeader.includes('frigate_token') ||
      setCookieHeader.includes('session') ||
      setCookieHeader.includes('access_token') ||
      setCookieHeader.includes('jwt') ||
      setCookieHeader.includes('auth') ||
      setCookieHeader.includes('sessionid')
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Error login JWT: ${response.status} - ${errorText}`);
      
      let detailedError = `HTTP ${response.status}: ${response.statusText}`;
      try {
        const errorJson = JSON.parse(errorText);
        if (errorJson.detail) {
          detailedError += `\nDetalle: ${JSON.stringify(errorJson.detail, null, 2)}`;
        }
      } catch {
        detailedError += `\nRespuesta: ${errorText}`;
      }
      
      if (response.status === 401) {
        return { success: false, error: 'Credenciales inv√°lidas - Usuario o contrase√±a incorrectos' };
      } else if (response.status === 404) {
        return { success: false, error: 'Endpoint /api/login no encontrado - Verificar versi√≥n de Frigate' };
      } else if (response.status === 422) {
        return { success: false, error: `Datos de login inv√°lidos - ${detailedError}` };
      }
      return { success: false, error: detailedError };
    }

    // ‚úÖ Login exitoso (HTTP 200)
    if (hasAuthCookie) {
      // console.log('‚úÖ Cookie de autenticaci√≥n detectada en respuesta exitosa');
      
      // Extraer el token de la cookie si est√° disponible
      let tokenFromCookie = null;
      if (setCookieHeader.includes('frigate_token=')) {
        const tokenMatch = setCookieHeader.match(/frigate_token=([^;]+)/);
        if (tokenMatch) {
          tokenFromCookie = tokenMatch[1];
          // console.log(`üîë Token extra√≠do de cookie: ${tokenFromCookie.substring(0, 20)}...`);
        }
      }

      // Tambi√©n intentar leer el body por si tiene JSON (como backup)
      try {
        const responseText = await response.text();
        if (responseText && responseText.trim()) {
          const data = JSON.parse(responseText);
          if (data.access_token) {
        // console.log('üìÑ Token JWT tambi√©n encontrado en response body');
            return {
              success: true,
              token: data.access_token,
              expiresAt: new Date(Date.now() + 86400000).toISOString() // 24 horas
            };
          }
        }
      } catch {
        // No hay problema si no hay JSON en el body (caso t√≠pico con Content-Length: 0)
        console.log('üí≠ No hay JSON en body, usando autenticaci√≥n por cookie √∫nicamente');
      }

      // Autenticaci√≥n exitosa por cookie (el caso normal seg√∫n el curl)
      return {
        success: true,
        token: tokenFromCookie || 'cookie-based-auth', // Usar token real o indicador
        expiresAt: new Date(Date.now() + 86400000).toISOString()
      };
    }

    // Si llegamos aqu√≠, HTTP 200 pero sin cookies de auth - intentar parsear JSON tradicional
    try {
      const data: JWTLoginResponse = await response.json();
      console.log('üìÑ Datos de respuesta JWT tradicional:', { 
        hasToken: !!data.access_token, 
        tokenType: data.token_type,
        expiresIn: data.expires_in 
      });
      
      if (data.access_token) {
        const expiresInSeconds = data.expires_in || 86400;
        const expiresAt = new Date(Date.now() + (expiresInSeconds * 1000)).toISOString();

        return {
          success: true,
          token: data.access_token,
          expiresAt
        };
      }
    } catch (e) {
      console.log('‚ö†Ô∏è No hay JSON response v√°lido');
    }

    return { success: false, error: 'Login exitoso pero no se detect√≥ m√©todo de autenticaci√≥n v√°lido' };

  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Error de conexi√≥n'
    };
  }
}

/**
 * Validar conexi√≥n con servidor Frigate (autenticaci√≥n inteligente)
 * Intenta primero sin auth, luego autom√°ticamente con JWT/cookies si es necesario
 */
export async function validateServerConnection(
  baseUrl: string,
  authData?: { username?: string; password?: string }
): Promise<ValidationResult> {
  try {
    // console.log(`üîç Validando conexi√≥n autom√°tica: ${baseUrl}`);

    // 1. Verificar conexi√≥n b√°sica a /api/config (sin autenticaci√≥n)
    const configUrl = `${baseUrl}/api/config`;
    // console.log('üåê Probando acceso sin autenticaci√≥n...');
    const basicResponse = await secureFetch(configUrl);
    
    if (basicResponse.ok) {
      console.log('‚úÖ Acceso exitoso sin autenticaci√≥n requerida');
      return {
        success: true,
        message: 'Conexi√≥n exitosa - Servidor p√∫blico (sin autenticaci√≥n)',
        requiresAuth: false
      };
    }

    // console.log(`üì° Respuesta sin auth: ${basicResponse.status} - Se requiere autenticaci√≥n`);

    // 2. Si no tenemos credenciales, informar que se requiere auth
    if (!authData?.username || !authData?.password) {
      return {
        success: false,
        message: 'Servidor requiere autenticaci√≥n - Proporciona usuario y contrase√±a',
        requiresAuth: true
      };
    }

    // 3. Intentar autenticaci√≥n JWT autom√°tica con cookies
    // console.log('üîê Probando autenticaci√≥n JWT con cookies...');
    const authResult = await loginToFrigate(baseUrl, authData.username, authData.password);
    
    if (!authResult.success) {
      return {
        success: false,
        message: `Error de autenticaci√≥n: ${authResult.error}`,
        requiresAuth: true,
        error: authResult.error
      };
    }

    // console.log('‚úÖ Login exitoso, validando acceso autenticado...');

    // 4. Validar que podemos acceder con la autenticaci√≥n obtenida
    let authHeaders: Record<string, string> = {};
    
    // Si tenemos token JWT tradicional, usarlo en Authorization header
    if (authResult.token && !authResult.token.startsWith('cookie-based')) {
      // El token puede ser el JWT real extra√≠do de la cookie
      authHeaders['Authorization'] = `Bearer ${authResult.token}`;
      // console.log(`üîë Usando token JWT en Authorization header: ${authResult.token.substring(0, 20)}...`);
    }
    
    // Para autenticaci√≥n por cookies, las cookies ya est√°n incluidas autom√°ticamente
    const authenticatedResponse = await secureFetch(configUrl, {
      headers: authHeaders,
      credentials: 'include' // Importante: incluir cookies siempre
    });

    if (authenticatedResponse.ok) {
      // console.log('üéâ Acceso autenticado exitoso');
      return {
        success: true,
        message: 'Autenticaci√≥n JWT exitosa con cookies',
        requiresAuth: true,
        token: authResult.token,
        expiresAt: authResult.expiresAt
      };
    } else {
      console.error(`‚ùå Acceso denegado despu√©s de login: ${authenticatedResponse.status}`);
      return {
        success: false,
        message: `Acceso denegado despu√©s de login exitoso (HTTP ${authenticatedResponse.status})`,
        requiresAuth: true,
        error: `HTTP ${authenticatedResponse.status}`
      };
    }

  } catch (error) {
    console.error('‚ùå Error validando conexi√≥n:', error);
    return {
      success: false,
      message: `Error de conexi√≥n: ${error instanceof Error ? error.message : 'Error desconocido'}`,
      requiresAuth: false,
      error: error instanceof Error ? error.message : 'Error desconocido'
    };
  }
}

/**
 * Verificar si un token JWT sigue siendo v√°lido
 */
export async function verifyJWTToken(baseUrl: string, token: string): Promise<boolean> {
  try {
    const response = await secureFetch(`${baseUrl}/api/config`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    return response.ok;
  } catch (error) {
    return false;
  }
}

/**
 * Obtener headers de autenticaci√≥n apropiados para un servidor
 */
export function getAuthHeaders(server: {
  auth_type?: string;
  username?: string;
  password?: string;
  jwt_token?: string;
}): Record<string, string> {
  const headers: Record<string, string> = {
    'Content-Type': 'application/json',
    'User-Agent': 'Exalink-Hub/1.0'
  };

  // Si hay un JWT token v√°lido, usarlo
  if (server.jwt_token && server.jwt_token !== 'cookie-based-auth') {
    headers.Authorization = `Bearer ${server.jwt_token}`;
  }
  
  // Para autenticaci√≥n por cookies (jwt_token === 'cookie-based-auth')
  // las cookies se manejan autom√°ticamente con credentials: 'include'
  // en el secure-fetch, no necesitamos headers adicionales

  return headers;
}